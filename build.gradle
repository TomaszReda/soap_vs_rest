plugins {
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'net.ltgt.apt' version '0.20'
    id 'io.franzbecker.gradle-lombok' version '1.7'
}
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'net.ltgt.apt-eclipse'

group = 'pl.tomasz_reda.praca_magisterska.soap_vs_rest'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    mapstructVersion = "1.3.0.Final"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    compile "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

}

test {
    useJUnitPlatform()
}

def webappDir = "$projectDir/src/main/webapp"
def execTempDir = "./src/main/resources/static/"

//bootJar {
//    dependsOn "buildAngular"
//}

jar {
    dependsOn "buildAngular"
}

task buildAngular(type: Exec) {
    dependsOn "installAngular"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
//	outputs.dir "$webappDir/dist"
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "ng.cmd", "build", "--prod"
    } else {
        commandLine "ng", "build", "--prod"
    }
    dependsOn "copyAngular"
}

task installAngular(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
//	outputs.dir "$webappDir/dist"
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}

task copyAngular(type: Copy) {
    from "${webappDir}/dist/webapp"
    into "src/main/resources/static"
}

