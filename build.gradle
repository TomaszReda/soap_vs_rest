plugins {
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'net.ltgt.apt' version '0.20'
    id 'io.franzbecker.gradle-lombok' version '1.7'
}
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'net.ltgt.apt-eclipse'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

group = 'pl.tomasz_reda.praca_magisterska.soap_vs_rest'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    jaxb
}



ext {
    mapstructVersion = "1.3.0.Final"
}
def queryDslVersion = '4.1.4'


repositories {
    mavenCentral()
}

dependencies {
    compile("com.querydsl:querydsl-core:${queryDslVersion}")
    compile("com.querydsl:querydsl-jpa:${queryDslVersion}")
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    compile group: 'org.apache.ws.security', name: 'wss4j', version: '1.6.19'
    compile group: 'org.springframework.ws', name: 'spring-ws-security', version: '2.2.0.RELEASE'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'org.springframework', name: 'spring-context-support', version: '4.1.7.RELEASE'
    compile group: 'org.springframework.session', name: 'spring-session-jdbc', version: '2.0.4.RELEASE'
    compile group: 'org.springframework.session', name: 'spring-session-core', version: '2.0.4.RELEASE'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    compile "org.mapstruct:mapstruct-jdk8:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    compile "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation 'org.springframework.ws:spring-ws-core'
    implementation("wsdl4j:wsdl4j:1.6.3")
    jaxb (
            'com.sun.xml.bind:jaxb-xjc:2.2.7',
            'com.sun.xml.bind:jaxb-impl:2.2.7'
    )
    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
    annotationProcessor(
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa",
            "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final",
            "javax.annotation:javax.annotation-api:1.3.2",
            "org.projectlombok:lombok",
            "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    )
}
task jaxb {
    def jaxbTargetDir = file("src/main/java/pl/tomasz_reda/praca_magisterska/soap_vs_rest/websocket/soap/model")
    doLast {
        jaxbTargetDir.mkdirs()
        ant.taskdef(
                name: 'xjc',
                classname: 'com.sun.tools.xjc.XJCTask',
                classpath: configurations.jaxb.asPath
        )
        ant.jaxbTargetDir = jaxbTargetDir
        ant.xjc(
                package: 'soap',
                destdir: '${jaxbTargetDir}'){
                schema(
                        dir: 'src/main/resources/xsd',
                        includes: "**/*.xsd"
                      )
                }

    }
}

test {
    useJUnitPlatform()
}

def webappDir = "$projectDir/src/main/webapp"
def execTempDir = "./src/main/resources/static/"

bootJar {
    dependsOn "buildAngular"
}

jar {
    dependsOn "buildAngular"
}

task buildAngular(type: Exec) {
    dependsOn "installAngular"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
//	outputs.dir "$webappDir/dist"
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "ng.cmd", "build", "--prod"
    } else {
        commandLine "ng", "build", "--prod"
    }
    dependsOn "copyAngular"
}

task installAngular(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
//	outputs.dir "$webappDir/dist"
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}

task copyAngular(type: Copy) {
    from "${webappDir}/dist/webapp"
    into "src/main/resources/static"
}

